// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {
    from "sgx_backtrace.edl" import *;
    from "sgx_net.edl" import *;
    from "sgx_pipe.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_tstd.edl" import *;

    trusted {
        /* define ECALLs here. */

        public sgx_status_t init_db([out, size=256] uint8_t* n,[out, size=4] uint8_t* e);

        public sgx_status_t signup([in, size=secret_len] const uint8_t* secret_data, size_t secret_len, [in, size=32] const uint8_t* cancel_key_x, [in, size=32] const uint8_t* cancel_key_y);

        public sgx_status_t host_retrieve(uint32_t uid);

        public sgx_status_t user_retrieve(uint32_t uid, [in, size=len] const uint8_t* some_string, size_t len, [out, size=364] uint8_t* encrypted_data);

        public sgx_status_t cancel(uint32_t uid, [in, size=data_len] const uint8_t* data, size_t data_len, [in, size=32] const uint8_t* cancel_sig_x, [in, size=32] const uint8_t* cancel_sig_y);

        public sgx_status_t audit([out, size=max_len] uint8_t* db, size_t max_len, [out, size=8] size_t* out_len);

        public sgx_status_t public_key([out, size=256] uint8_t* n,[out, size=4] uint8_t* e);

        public sgx_status_t update_reset_time(uint64_t value);

        public sgx_status_t update_retrieve_wait_time(uint64_t value);

        public sgx_status_t update_max_retrieve(uint64_t value);

    };
};
